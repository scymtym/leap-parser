* Dependencies
  + [[https://github.com/scymtym/architecture.builder-protocol][architecture.builder-protocol]]
  + [[https://github.com/scymtym/parser.common-rules][parser.common-rules]]
* Usage
  + Load the system
    #+BEGIN_SRC lisp :results silent :exports both
      (ql:quickload :leap-parser)
    #+END_SRC

  + Some example input
    #+BEGIN_SRC lisp :results output :exports both
      (defparameter *input*
        (alexandria:read-file-into-string
         (asdf:system-relative-pathname :leap-parser "examples/test.leap")))

      (princ *input*)
    #+END_SRC

    #+RESULTS:
    #+begin_example
    # Comment

    logFile leap.log

    x = 5

    addAtomTypes {
      { "H"   "H" "sp3" { (+ 1 (alexandria:factorial x)) } }
    }

    HOH = TP3
    #+end_example

  + Parse it, constructing the result syntax tree using the ~list~
    builder

    #+BEGIN_SRC lisp :results value scalar :exports both
      (architecture.builder-protocol:with-builder ('list)
        (esrap:parse 'leap-parser::leap *input*))
    #+END_SRC

    #+RESULTS:
    #+begin_example
    (:LEAP
     (:INSTRUCTION
      (((:COMMENT NIL :CONTENT " Comment" :BOUNDS (0 . 9)))
       ((:FUNCTION
         (:ARGUMENT (((:LITERAL NIL :VALUE "leap.log" :BOUNDS (19 . 27))))) :NAME
         "logFile" :BOUNDS (11 . 27)))
       ((:ASSIGNMENT (:VALUE (((:LITERAL NIL :VALUE 5 :BOUNDS (33 . 34))))) :NAME
         "x" :BOUNDS (29 . 34)))
       ((:FUNCTION
         (:ARGUMENT
          (((:LIST
             (:ELEMENT
              (((:LIST
                 (:ELEMENT
                  (((:LITERAL NIL :VALUE "H" :BOUNDS (55 . 58)))
                   ((:LITERAL NIL :VALUE "H" :BOUNDS (61 . 64)))
                   ((:LITERAL NIL :VALUE "sp3" :BOUNDS (65 . 70)))
                   ((:LIST
                     (:ELEMENT
                      (((:S-EXPR NIL :VALUE
                         (+ 1 (ALEXANDRIA.0.DEV:FACTORIAL LEAP-USER::X)) :BOUNDS
                         (73 . 104)))))
                     :BOUNDS (71 . 105)))))
                 :BOUNDS (53 . 107)))))
             :BOUNDS (49 . 109)))))
         :NAME "addAtomTypes" :BOUNDS (36 . 109)))
       ((:ASSIGNMENT (:VALUE (((:LITERAL NIL :VALUE "TP3" :BOUNDS (117 . 120)))))
         :NAME "HOH" :BOUNDS (111 . 120)))))
     :BOUNDS (0 . 120))
    NIL
    T
    #+end_example
